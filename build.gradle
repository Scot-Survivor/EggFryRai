buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'org.openjfx:javafx-plugin:0.1.0'
    }
}

plugins {
    id 'jacoco'
    id 'application'
    id 'com.diffplug.spotless' version '5.14.0'
    id 'com.github.johnrengelman.shadow' version '8.1.0'
}

// apply plugin: 'org.openjfx.javafxplugin'

group = 'com.comp5590'
version = '1.0-SNAPSHOT'

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        name "mvnrepository.com"
        url "https://mvnrepository.com/artifact"
    }
}

def currentOS = org.gradle.internal.os.OperatingSystem.current()
def platform
if (currentOS.isWindows()) {
    platform = 'win'
} else if (currentOS.isLinux()) {
    platform = 'linux'
} else if (currentOS.isMacOsX()) {
    platform = 'mac'
} else {
    throw new GradleException("Unsupported OS: ${currentOS}")
}
System.out.println("Platform: " + platform)
dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.1'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testImplementation "org.testfx:testfx-core:4.0.18"
    testImplementation "org.testfx:testfx-junit5:4.0.18"
    testImplementation "org.testfx:openjfx-monocle:17.0.10"
    testImplementation group: 'org.assertj', name: 'assertj-core', version: '3.13.2'
    // JavaFX
    implementation "org.openjfx:javafx-base:21.0.2:${platform}"
    implementation "org.openjfx:javafx-graphics:21.0.2:${platform}"
    implementation "org.openjfx:javafx-controls:21.0.2:${platform}"
    implementation "org.openjfx:javafx-fxml:21.0.2:${platform}"
    // ORM
    implementation "org.hibernate.orm:hibernate-core:6.4.4.Final"
    implementation "jakarta.persistence:jakarta.persistence-api:3.1"
    // Password Hashers
    implementation 'de.mkammerer:argon2-jvm:2.11'
    implementation 'org.mindrot:jbcrypt:0.4'
    // Add H2 Driver
    implementation 'com.h2database:h2:2.2.222'

    // Config file handler
    implementation 'org.apache.commons:commons-configuration2:2.9.0'
    implementation 'commons-beanutils:commons-beanutils:1.9.4'

    // Logging
    implementation 'org.apache.logging.log4j:log4j-api:2.23.0'
    implementation 'org.apache.logging.log4j:log4j-core:2.23.0'


    implementation 'org.reflections:reflections:0.9.12'
}

/* javafx {
    version = "16"
    modules = ['javafx.controls', 'javafx.graphics']
} */

mainClassName = 'com.comp5590.Launcher'

jar {
    manifest {
        attributes 'Main-Class': mainClassName
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

test {
    useJUnitPlatform()
}

java {
    modularity.inferModulePath.set(true)
}

spotless {
    java {
        removeUnusedImports()
        trimTrailingWhitespace()
        endWithNewline()
        indentWithSpaces(4)
    }
}

compileJava {
    doFirst {
        options.compilerArgs = [
                '--module-path', classpath.asPath,
                '--add-modules', 'javafx.controls,javafx.fxml'
        ]
    }
}

run {
    doFirst {
        jvmArgs = [
                '--module-path', classpath.asPath,
                '--add-modules', 'javafx.controls,javafx.fxml'
        ]
    }
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
}

tasks.register("addPreCommitGitHookOnBuild", Copy) {
    from file(".scripts/pre-commit")
    into file(".git/hooks")
}
tasks.register("addCommitMsgGitHookOnBuild", Copy) {
    from file(".scripts/commit-msg")
    into file(".git/hooks")
}
check.dependsOn("addPreCommitGitHookOnBuild")
check.dependsOn("addCommitMsgGitHookOnBuild")
compileJava.dependsOn("addPreCommitGitHookOnBuild")
compileJava.dependsOn("addCommitMsgGitHookOnBuild")