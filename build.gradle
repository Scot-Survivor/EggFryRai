buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'org.openjfx:javafx-plugin:0.1.0'
    }
}

plugins {
    id 'jacoco'
    id 'application'
    id 'com.diffplug.spotless' version '6.25.0'
    id 'com.github.node-gradle.node' version '3.5.1' // Auto handle NPM
    id 'com.github.johnrengelman.shadow' version '8.1.0'
    id 'org.beryx.runtime' version '1.12.5'  // Allow for runtime package installer
    id 'maven-publish'
    id 'pl.allegro.tech.build.axion-release' version '1.13.6'
}

// apply plugin: 'org.openjfx.javafxplugin'

group = 'com.comp5590'
version = '1.0.1'

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        name "mvnrepository.com"
        url "https://mvnrepository.com/artifact"
    }
}
publishing {
    publications {
        shadow(MavenPublication) { publication ->
            from project.shadow.component(publication)
            artifactId = 'PDMS'
        }
    }
    repositories {
        maven {
            url "https://git.kent.ac.uk/api/v4/projects/3975/packages/maven"
            credentials(HttpHeaderCredentials) {
                name = "PRIVATE-TOKEN"
                value = project.findProperty('gitLabPrivateToken') ?: "" // the variable resides in $GRADLE_USER_HOME/gradle.properties
            }
            authentication {
                header(HttpHeaderAuthentication)
            }
        }
    }
}

scmVersion {
    // Not really needed, but I like it:
    useHighestVersion = true
}

def currentOS = org.gradle.internal.os.OperatingSystem.current()
def platform
if (currentOS.isWindows()) {
    platform = 'win'
} else if (currentOS.isLinux()) {
    platform = 'linux'
} else if (currentOS.isMacOsX()) {
    platform = 'mac'
} else {
    throw new GradleException("Unsupported OS: ${currentOS}")
}
System.out.println("Platform: " + platform)
dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.1'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testImplementation "org.testfx:testfx-core:4.0.18"
    testImplementation "org.testfx:testfx-junit5:4.0.18"
    testImplementation "org.testfx:openjfx-monocle:17.0.10"
    testImplementation group: 'org.assertj', name: 'assertj-core', version: '3.25.3'
    testImplementation group: 'org.hamcrest', name: 'hamcrest', version: '2.1'
    testImplementation 'org.projectlombok:lombok:1.18.30'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.30'
    // JavaFX
    implementation "org.openjfx:javafx-base:21.0.2:${platform}"
    implementation "org.openjfx:javafx-graphics:21.0.2:${platform}"
    implementation "org.openjfx:javafx-controls:21.0.2:${platform}"
    implementation "org.openjfx:javafx-fxml:21.0.2:${platform}"
    // ORM
    implementation "org.hibernate.orm:hibernate-core:6.4.4.Final"
    implementation "jakarta.persistence:jakarta.persistence-api:3.1"
    implementation "org.hibernate.validator:hibernate-validator:8.0.1.Final"
    implementation "org.glassfish.expressly:expressly:5.0.0"
    // Password Hashers
    implementation 'de.mkammerer:argon2-jvm:2.11'
    implementation 'org.mindrot:jbcrypt:0.4'
    // Add H2 Driver
    implementation 'com.h2database:h2:2.2.222'

    // Config file handler
    implementation 'org.apache.commons:commons-configuration2:2.9.0'
    implementation 'commons-beanutils:commons-beanutils:1.9.4'

    // Logging
    implementation 'org.apache.logging.log4j:log4j-api:2.23.0'
    implementation 'org.apache.logging.log4j:log4j-core:2.23.0'


    implementation 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'

    implementation 'org.reflections:reflections:0.10'

    // 2FA
    implementation 'dev.samstevens.totp:totp:1.7.1'

    // Components
    implementation 'io.github.palexdev:materialfx:11.17.0'
}

node {
    download = true
    version = '18.16.1'
    npmVersion = '9.5.1'
    // when setting both these directories, npm and node will be in separate directories
    workDir = file("${buildDir}/nodejs")
    npmWorkDir = file("${buildDir}/npm")
}

mainClassName = 'com.comp5590.Launcher'

jar {
    manifest {
        attributes 'Main-Class': mainClassName
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
}

application {
    mainClass = mainClassName
    applicationName = "PDMS"
}

test {
    useJUnitPlatform()
    testLogging.showStackTraces = true
    testLogging.showStandardStreams = true
    minHeapSize = "512m"
    maxHeapSize = "2048m"
}

java {
    modularity.inferModulePath.set(true)
}

def npmExec = System.getProperty('os.name').toLowerCase().contains('windows') ? '/npm.cmd' : '/bin/npm'
def nodeExec = System.getProperty('os.name').toLowerCase().contains('windows') ? '/node.exe' : '/bin/node'

spotless {
    format 'misc', {
        // define the files to apply `misc` to
        target '*.gradle', '.gitattributes', '.gitignore'

        // define the steps to apply to those files
        trimTrailingWhitespace()
        indentWithSpaces(4)
        endWithNewline()
    }
    java {
        cleanthat()

        prettier(['prettier': '3.0.3', 'prettier-plugin-java': '2.3.0'])
                .npmExecutable("${tasks.named('npmSetup').get().npmDir.get()}${npmExec}")
                .nodeExecutable("${tasks.named('nodeSetup').get().nodeDir.get()}${nodeExec}")
                .config(['parser': 'java', 'tabWidth': 4, 'plugins': ['prettier-plugin-java'], 'printWidth': 120])
                .npmInstallCache()

        removeUnusedImports()
        trimTrailingWhitespace()
        endWithNewline()
        indentWithSpaces(4)

        replaceRegex 'Remove empty lines before end of block', '\\n[\\n]+(\\s*})(?=\\n)', '\n$1'
        replaceRegex 'Remove trailing empty comment lines.', '\n\\s*\\*(\n\\s*\\*/\n)', '$1'
    }
}

compileJava {
    doFirst {
        options.compilerArgs = [
                '--module-path', classpath.asPath,
                '--add-modules', 'javafx.controls,javafx.fxml'
        ]
    }
}

run {
    doFirst {
        jvmArgs = [
                '--module-path', classpath.asPath,
                '--add-modules', 'javafx.controls,javafx.fxml'
        ]
    }
}

runtime {
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']

    launcher {
        noConsole = true
    }

    jpackageImage {
        version = '1.0.0'
    }

    jpackage {
        // Uncomment and adjust the following line if your runtime task is configured to generate images for multiple platforms
        // targetPlatformName = "mac"

        def currentOs = org.gradle.internal.os.OperatingSystem.current()

        installerOptions += ['--resource-dir', "src/main/resources"]
        installerOptions += ['--vendor', 'Acme Corporation']

        if(currentOs.windows) {
            installerOptions += ['--win-per-user-install', '--win-dir-chooser', '--win-menu', '--win-shortcut']
        }
        else if (currentOs.linux) {
            installerOptions += ['--linux-package-name', 'pdms','--linux-shortcut']
        }
        else if (currentOs.macOsX) {
            installerOptions += ['--mac-package-name', 'pdms']
        }
    }
}


jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
}

tasks.register("addPreCommitGitHookOnBuild", Copy) {
    from file(".scripts/pre-commit")
    into file(".git/hooks")
}
tasks.register("addCommitMsgGitHookOnBuild", Copy) {
    from file(".scripts/commit-msg")
    into file(".git/hooks")
}
check.dependsOn("addPreCommitGitHookOnBuild")
check.dependsOn("addCommitMsgGitHookOnBuild")
compileJava.dependsOn("addPreCommitGitHookOnBuild")
compileJava.dependsOn("addCommitMsgGitHookOnBuild")

tasks.named('spotlessApply').configure {
    dependsOn ('nodeSetup', 'npmSetup')
    dependsOn 'addPreCommitGitHookOnBuild'
    dependsOn 'addCommitMsgGitHookOnBuild'
}

tasks.named('spotlessCheck').configure {
    dependsOn ('nodeSetup', 'npmSetup')
    dependsOn 'addPreCommitGitHookOnBuild'
    dependsOn 'addCommitMsgGitHookOnBuild'
}

tasks.named('spotlessDiagnose').configure {
    dependsOn ('nodeSetup', 'npmSetup')
    dependsOn 'addPreCommitGitHookOnBuild'
    dependsOn 'addCommitMsgGitHookOnBuild'
}

javadoc {
    destinationDir = file("${buildDir}/docs/javadoc")
}
